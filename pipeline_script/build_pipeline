pipeline {
    agent any

    parameters {
        string(name: 'ECR_REPO_NAME', defaultValue: 'amazon-prime', description: 'Enter repository name')
        string(name: 'AWS_ACCOUNT_ID', defaultValue: '123456789012', description: 'Enter AWS Account ID')
    }

    tools {
        jdk 'JDK17'
        nodejs 'NodeJS'
    }

    environment {
        SCANNER_HOME = tool 'SonarQube Scanner'
    }

    stages {

        stage ('1. Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('2. Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/prajwalchapke055/Amazon-Prime-Clone-DevSecOps-Project.git'
            }
        }

        stage('3. SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh """
                    ${SCANNER_HOME}/bin/sonar-scanner \
                    -Dsonar.projectName=amazon-prime \
                    -Dsonar.projectKey=amazon-prime
                    """
                }
            }
        }

        // stage('4. Quality Gate') {
        //   steps {
        //        waitForQualityGate abortPipeline: true
        //    }
        // }

        stage("4. Quality Gate") {
            steps {
                script {
                    def qualityGate = waitForQualityGate(abortPipeline: false, credentialsId: 'sonar-token')
                    if (qualityGate.status != 'OK') {
                        error "Quality Gate failed: ${qualityGate.status}"
                        }
                    }
                }
        }


        stage('5. Install NPM Dependencies') {
            steps {
                sh '''
                rm -rf node_modules package-lock.json
                npm install --legacy-peer-deps
                '''
            }
        }


        stage ('6. OWASP Dependency-Check') {
            steps {
                withCredentials([string(credentialsId: 'nvd-api-key', variable: 'NVD_API_KEY')]) {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'dc'
            }
            dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
        }
    }


        stage('7. Trivy Scan & Report') {
            steps {
                script {
                    sh "trivy fs --format table -o trivy-fs-report.html . "
                }
            }
        }

stage('8. Build Docker Image') {
    steps {
        script {
            def imageName = "${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}"
            sh """
                docker build -t ${params.ECR_REPO_NAME} .
                docker build -t ${imageName}:${BUILD_NUMBER} -t ${imageName}:latest .
            """
        }
    }
}

stage('9. Create ECR Repo') {
    steps {
        withCredentials([
            string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'),
            string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')
        ]) {
            sh '''
            aws configure set aws_access_key_id $AWS_ACCESS_KEY
            aws configure set aws_secret_access_key $AWS_SECRET_KEY
            aws ecr describe-repositories --repository-names ${ECR_REPO_NAME} --region us-east-1 || \
            aws ecr create-repository --repository-name ${ECR_REPO_NAME} --region us-east-1
            '''
        }
    }
}

stage('10. Login to ECR') {
    steps {
        withCredentials([
            string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'),
            string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')
        ]) {
            sh '''
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com
            '''
        }
    }
}

stage('11. Push Image to ECR') {
    steps {
        script {
            def imageName = "${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}"
            sh """
                docker push ${imageName}:${BUILD_NUMBER}
                docker push ${imageName}:latest
            """
        }
    }
}

stage('12. Cleanup Old Images') {
    steps {
        script {
            def imageName = "${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}"
            sh """
                docker rmi ${imageName}:${BUILD_NUMBER} || true
                docker rmi ${imageName}:latest || true
                docker image prune -f
            """
        }
    }
}

stage('13. Run Docker Container') {
    steps {
        script {
            def containerName = "${params.ECR_REPO_NAME}"
            def imageName = "${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}"
            sh """
                docker rm -f ${containerName} || true
                docker run -d --name ${containerName} -p 3000:3000 ${imageName}:latest
                docker ps
            """
            }
        }
    }
}
post {
    always {
        script {
            def jobName = env.JOB_NAME
            def buildNumber = env.BUILD_NUMBER
            def buildStatus = currentBuild.currentResult ?: 'UNKNOWN'
            def buildUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')[0]?.userId ?: 'GitHub Triggered'
            def bannerColor = buildStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

            def body = """<html>
                            <body>
                                <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                                    <h2>${jobName} - Build #${buildNumber}</h2>
                                    <div style="background-color: ${bannerColor}; padding: 10px;">
                                        <h3 style="color: white;">Pipeline Status: ${buildStatus.toUpperCase()}</h3>
                                    </div>
                                    <p><strong>Started by:</strong> ${buildUser}</p>
                                    <p>Check the <a href="${env.BUILD_URL}">console output</a>.</p>
                                </div>
                            </body>
                          </html>"""

            emailext(
                subject: "Pipeline ${buildStatus}: ${jobName} #${buildNumber}",
                body: body,
                to: 'prajwalchapke742@gmail.com',
                from: 'jenkins@example.com',
                replyTo: 'jenkins@example.com',
                mimeType: 'text/html',
                attachmentsPattern: 'trivy-fs-report.html,dependency-check-report.xml,**/*.html,**/*txt,**/*.xml'
            )
            }
        }
    }
}
