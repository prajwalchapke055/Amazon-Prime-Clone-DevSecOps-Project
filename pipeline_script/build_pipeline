pipeline {
    agent any

    parameters {
        string(name: 'ECR_REPO_NAME', defaultValue: 'amazon-prime', description: 'Enter repository name')
        string(name: 'AWS_ACCOUNT_ID', defaultValue: '123456789012', description: 'Enter AWS Account ID')
    }

    tools {
        jdk 'JDK17'
        nodejs 'NodeJS'
    }

    environment {
        SCANNER_HOME = tool 'SonarQube Scanner'
        AWS_REGION = "us-east-1"
        IMAGE_NAME = "${params.ECR_REPO_NAME}"
        ECR_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${params.ECR_REPO_NAME}"
    }

    stages {

        stage ('1. Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('2. Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/prajwalchapke055/Amazon-Prime-Clone-DevSecOps-Project.git'
            }
        }

        stage('3. SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh """
                    ${SCANNER_HOME}/bin/sonar-scanner \
                    -Dsonar.projectName=amazon-prime \
                    -Dsonar.projectKey=amazon-prime
                    """
                }
            }
        }

        // stage('4. Quality Gate') {
        //   steps {
        //        waitForQualityGate abortPipeline: true
        //    }
        // }

        stage("4. Quality Gate") {
            steps {
                script {
                    def qualityGate = waitForQualityGate(abortPipeline: false, credentialsId: 'sonar-token')
                    if (qualityGate.status != 'OK') {
                        error "Quality Gate failed: ${qualityGate.status}"
                        }
                    }
                }
        }


        stage('5. Install NPM Dependencies') {
            steps {
                sh '''
                rm -rf node_modules package-lock.json
                npm install --legacy-peer-deps
                '''
            }
        }

// stage('6. OWASP Dependency-Check') {
//     steps {
//         withCredentials([string(credentialsId: 'nvd-api-key', variable: 'NVD_API_KEY')]) {
//             sh 'mkdir -p dependency-check-report'  // Ensure output directory exists
//             dependencyCheck(
//                 additionalArguments: '--scan ./ ' +
//                                      '--format XML ' +
//                                      '--format HTML ' +
//                                      '--out dependency-check-report ' +
//                                      '--disableYarnAudit ' +
//                                      '--disableNodeAudit ' +
//                                      '--nvdApiKey=' + NVD_API_KEY,
//                 odcInstallation: 'dc'
//             )
//         }
//         dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
//     }
// }


        stage('6. Trivy Scan & Report') {
            steps {
                script {
                    sh "trivy fs --format table -o trivy-fs-report.html . "
                }
            }
        }
        
stage('7. Build Docker Image') {
            steps {
                script {
                    sh """
                        echo "Cleaning up any existing containers..."

                        # Stop and remove running container
                        if docker ps -a --format '{{.Names}}' | grep -w amazon-prime; then
                            docker stop amazon-prime || true
                            docker rm -f amazon-prime || true
                        fi

                        # Remove image if exists
                        if docker images -q ${IMAGE_NAME}:latest > /dev/null; then
                            docker rmi -f ${IMAGE_NAME}:latest || true
                        fi

                        echo "Building new Docker image..."
                        docker build -t ${IMAGE_NAME}:latest .

                        echo "Tagging image for ECR..."
                        docker tag ${IMAGE_NAME}:latest ${ECR_URI}:${BUILD_NUMBER}
                        docker tag ${IMAGE_NAME}:latest ${ECR_URI}:latest

                        echo "Running container on port 5000..."
                        docker run -d --name amazon-prime -p 5000:5000 ${IMAGE_NAME}:latest
                    """
                }
            }
        }

        stage('8. Create ECR Repo') {
            steps {
                withCredentials([
                    string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'),
                    string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')
                ]) {
                    sh """
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY
                        aws configure set aws_secret_access_key $AWS_SECRET_KEY
                        aws ecr describe-repositories --repository-names ${IMAGE_NAME} --region ${AWS_REGION} || \
                        aws ecr create-repository --repository-name ${IMAGE_NAME} --region ${AWS_REGION}
                    """
                }
            }
        }

        stage('9. Login to ECR') {
            steps {
                withCredentials([
                    string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'),
                    string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')
                ]) {
                    sh """
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY
                        aws configure set aws_secret_access_key $AWS_SECRET_KEY
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URI}
                    """
                }
            }
        }

        stage('10. Push Image to ECR') {
            steps {
                sh """
                    docker push ${ECR_URI}:${BUILD_NUMBER}
                    docker push ${ECR_URI}:latest
                """
            }
        }

        stage('11. Cleanup Old Images') {
            steps {
                sh """
                    docker rmi -f ${ECR_URI}:${BUILD_NUMBER} || true
                    docker rmi -f ${ECR_URI}:latest || true
                    docker rmi -f ${IMAGE_NAME}:latest || true
                    docker image prune -f
                """
            }
        }
    }
    
    
post {
    always {
        // archiveArtifacts artifacts: 'dependency-check-report/*', fingerprint: true

        script {
            def jobName = env.JOB_NAME
            def buildNumber = env.BUILD_NUMBER
            def buildStatus = currentBuild.currentResult ?: 'UNKNOWN'

            def userCause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
            def buildUser = userCause ? userCause[0]?.userId : 'GitHub or Timer Triggered'

            def bannerColor = buildStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

            def body = """<html>
                            <body>
                                <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                                    <h2>${jobName} - Build #${buildNumber}</h2>
                                    <div style="background-color: ${bannerColor}; padding: 10px;">
                                        <h3 style="color: white;">Pipeline Status: ${buildStatus.toUpperCase()}</h3>
                                    </div>
                                    <p><strong>Started by:</strong> ${buildUser}</p>
                                    <p>Check the <a href="${env.BUILD_URL}">console output</a>.</p>
                                </div>
                            </body>
                          </html>"""

            emailext(
                subject: "Pipeline ${buildStatus}: ${jobName} #${buildNumber}",
                body: body,
                to: 'prajwalchapke742@gmail.com',
                from: 'prajwalchapke742@gmail.com',
                replyTo: 'prajwalchapke742@gmail.com',
                mimeType: 'text/html',
                attachmentsPattern: 'trivy-fs-report.html,dependency-check-report.xml,**/*.html,**/*txt,**/*.xml'
            )
        }
    }
}

}
