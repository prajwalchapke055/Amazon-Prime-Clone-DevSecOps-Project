pipeline {
    agent any

    parameters {
        string(name: 'ECR_REPO_NAME', defaultValue: 'amazon-prime', description: 'Enter repository name')
        string(name: 'AWS_ACCOUNT_ID', defaultValue: '123456789012', description: 'Enter AWS Account ID')
    }

    tools {
        jdk 'JDK17'
        nodejs 'NodeJS'
    }

    environment {
        SCANNER_HOME = tool 'SonarQube Scanner'
    }

    stages {
        stage('1. Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/prajwalchapke055/Amazon-Prime-Clone-DevSecOps-Project.git'
            }
        }

        stage('2. SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh """
                    ${SCANNER_HOME}/bin/sonar-scanner \
                    -Dsonar.projectName=amazon-prime \
                    -Dsonar.projectKey=amazon-prime
                    """
                }
            }
        }

        stage('3. Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: true
            }
        }

        stage('4. Install npm') {
            steps {
                sh '''
                rm -rf node_modules package-lock.json
                npm install --legacy-peer-deps
                '''
            }
        }


        stage ('5. OWASP Dependency-Check') {
    steps {
        dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'dependencyCheckInstallation'
        dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
    }
        }



//         stage ('5. OWASP Dependency-Check') {
//     steps {
//         withCredentials([string(credentialsId: 'nvd-api-key', variable: 'NVD_API_KEY')]) {
//             dependencyCheck additionalArguments: """ 
//                 -o "./" 
//                 -s "./" 
//                 -f "XML" 
//                 --prettyPrint
//                 --nvdApiKey ${NVD_API_KEY}
//             """, odcInstallation: 'dependencyCheckInstallation'
            
//             dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
//         }
//     }
// }


            stage('6. Trivy Scan & Report') {
                steps {
                    script {
                    sh "trivy fs --format table -o trivy-fs-report.html . "
                    }
                }
            }
        
// stage('6. Trivy Scan & Report') {
//     steps {
//         script {
//             sh '''
//             echo "Downloading Trivy HTML report template..."
//             curl -sSL -o html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl

//             echo "Running Trivy file system scan..."
//             trivy fs --format template --template "@html.tpl" -o trivy-fs-report.html .
//             '''
//         }
//         publishHTML(target: [
//             allowMissing: false,
//             alwaysLinkToLastBuild: true,
//             keepAll: true,
//             reportDir: '.',
//             reportFiles: 'trivy-fs-report.html',
//             reportName: 'Trivy FS Vulnerability Report'
//         ])
//     }
// }



stage('7. Build, Push & Deploy Docker Container') {
    steps {
        withDockerRegistry(credentialsId: 'docker', url: 'https://index.docker.io/v1/') {
            script {
                def imageName = "prajwal055/${params.ECR_REPO_NAME}"
                def fullImage = "${imageName}:latest"

                sh "docker build -t ${fullImage} ."
                sh "docker push ${fullImage}"
                sh "docker rm -f amazon-prime || true"
                sh "docker run -d --rm --name amazon-prime -p 3000:3000 ${fullImage}"
            }
        }
    }
}

        stage('8. Create ECR Repo') {
            steps {
                withCredentials([
                    string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'),
                    string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')
                ]) {
                    sh '''
                    aws configure set aws_access_key_id $AWS_ACCESS_KEY
                    aws configure set aws_secret_access_key $AWS_SECRET_KEY
                    aws ecr describe-repositories --repository-names ${ECR_REPO_NAME} --region us-east-1 || \
                    aws ecr create-repository --repository-name ${ECR_REPO_NAME} --region us-east-1
                    '''
                }
            }
        }

        stage('9. Login to ECR & Tag Image') {
            steps {
                withCredentials([
                    string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'),
                    string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')
                ]) {
                    sh '''
                    aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com
                    docker tag ${ECR_REPO_NAME}:latest ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${ECR_REPO_NAME}:${BUILD_NUMBER}
                    docker tag ${ECR_REPO_NAME}:latest ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${ECR_REPO_NAME}:latest
                    '''
                }
            }
        }

        stage('10. Push Image to ECR') {
            steps {
                withCredentials([
                    string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'),
                    string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')
                ]) {
                    sh '''
                    docker push ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${ECR_REPO_NAME}:${BUILD_NUMBER}
                    docker push ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${ECR_REPO_NAME}:latest
                    '''
                }
            }
        }

        stage('11. Cleanup Images') {
            steps {
                sh '''
                docker rmi ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${ECR_REPO_NAME}:${BUILD_NUMBER} || true
                docker rmi ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${ECR_REPO_NAME}:latest || true
                docker images
                '''
            }
        }
    }

  post {
    always {
        script {
            def jobName = env.JOB_NAME
            def buildNumber = env.BUILD_NUMBER
            def buildStatus = currentBuild.currentResult ?: 'UNKNOWN'
            def buildUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')[0]?.userId ?: 'GitHub Triggered'
            def bannerColor = buildStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

            def body = """<html>
                            <body>
                                <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                                    <h2>${jobName} - Build #${buildNumber}</h2>
                                    <div style="background-color: ${bannerColor}; padding: 10px;">
                                        <h3 style="color: white;">Pipeline Status: ${buildStatus.toUpperCase()}</h3>
                                    </div>
                                    <p><strong>Started by:</strong> ${buildUser}</p>
                                    <p>Check the <a href="${env.BUILD_URL}">console output</a>.</p>
                                </div>
                            </body>
                          </html>"""

            emailext(
                subject: "Pipeline ${buildStatus}: ${jobName} #${buildNumber}",
                body: body,
                to: 'prajwalchapke742@gmail.com',
                from: 'jenkins@example.com',
                replyTo: 'jenkins@example.com',
                mimeType: 'text/html',
                attachmentsPattern: 'trivy-fs-report.html,dependency-check-report.xml,**/*.html,**/*txt,**/*.xml'
            )
        }
    }
}
